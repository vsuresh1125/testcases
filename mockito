........

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
public class CardopsAcctNbrLookupServiceTest {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private CardopsAcctNbrLookupService lookupService;

    @Test
    void testGetAccountNumberByAcctKeyAndSeqNum_Exception() {
        // Arrange
        AccountIdentifiersVO accountIdentifiersVO = new AccountIdentifiersVO();
        accountIdentifiersVO.setAccountKey("12345");
        accountIdentifiersVO.setSequenceNumber("001");

        // Creating real ResponseEntity (to avoid mocking final methods)
        ResponseEntity<Object> responseEntity = new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

        // Stubbing webClient to throw an exception
        when(webClient.executePostSynchronous(any(), any(), eq(Object.class)))
                .thenThrow(new WebResponseServerException("Service Unavailable"));

        // Act & Assert
        WebResponseServerException exception = assertThrows(WebResponseServerException.class, () -> {
            lookupService.getAccountNumberByAcctKeyAndSeqNum(accountIdentifiersVO);
        });

        assertEquals("Service Unavailable", exception.getMessage());
    }
}
........
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@Test
void testRetryFallbackForGetAccountNumberByAcctKeyAndSeqNum() throws Exception {
    // Mock the exception to be thrown
    Exception mockException = new Exception("Test Exception");

    when(webClient.executePostSynchronous(any(), any(), eq(Object.class)))
        .thenThrow(mockException)  // First attempt fails
        .thenThrow(mockException)  // Second attempt fails
        .thenThrow(mockException); // Third attempt fails (reaching max retries)

    // Assert that the exception is thrown due to max retries
    Exception thrownException = assertThrows(Exception.class, () -> {
        lookupService.getAccountNumberByAcctKeyAndSeqNum(mockAccountIdentifiers);
    });

    // Verify the number of retries
    verify(webClient, times(3)).executePostSynchronous(any(), any(), eq(Object.class));

    // Assert error message
    assertEquals("Test Exception", thrownException.getMessage());
}
