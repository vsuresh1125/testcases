......
import static org.mockito.Mockito.*;

import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;

public class PCSOConfigTest {

    @Test
    public void testPcsoDataSource() {
        // Arrange
        DataSourceProperties mockProperties = mock(DataSourceProperties.class);
        DataSourceBuilder<?> mockBuilder = mock(DataSourceBuilder.class);
        DataSource mockDataSource = mock(DataSource.class);

        // Correctly mock the return of initializeDataSourceBuilder()
        when(mockProperties.initializeDataSourceBuilder()).thenReturn((DataSourceBuilder) mockBuilder);
        
        // Mock type and build methods correctly
        when(mockBuilder.type(HikariDataSource.class)).thenReturn((DataSourceBuilder) mockBuilder);
        when(mockBuilder.build()).thenReturn(mockDataSource);

        // Act
        DataSource dataSource = mockProperties.initializeDataSourceBuilder()
                                               .type(HikariDataSource.class)
                                               .build();

        // Assert
        assertNotNull(dataSource, "The DataSource should not be null");
    }
}
.......
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.test.context.SpringBootTest;
import com.zaxxer.hikari.HikariDataSource;

@SpringBootTest
public class PcsoConfigTest {

    @InjectMocks
    private PcsoConfig pcsoConfig;

    @Mock
    private DataSourceProperties mockProperties;

    @Mock
    private HikariDataSource mockDataSource;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPcsoDataSource() {
        // Arrange
        when(mockProperties.initializeDataSourceBuilder())
                .thenReturn(mock(DataSourceBuilder.class));
        
        DataSourceBuilder<?> mockBuilder = mock(DataSourceBuilder.class);
        when(mockBuilder.type(HikariDataSource.class)).thenReturn(mockBuilder);
        when(mockBuilder.build()).thenReturn(mockDataSource);

        when(mockProperties.initializeDataSourceBuilder())
                .thenReturn(mockBuilder);

        // Act
        DataSource dataSource = pcsoConfig.pcsoDataSource();

        // Assert
        assertNotNull(dataSource, "The DataSource should not be null");
    }
}
