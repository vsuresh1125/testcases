
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

public class MemosDateUtilityTest {

    private MemosDateUtility memosDateUtility;

    @BeforeEach
    void setUp() {
        memosDateUtility = new MemosDateUtility();
    }

    @Test
    void testGetFormattedDate_ValidDateAndTime_ReturnsFormattedDate() throws ParseException {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("20250101");
        when(memo.getMemoTime()).thenReturn("123000");

        try (MockedStatic<Constants> constantsMock = Mockito.mockStatic(Constants.class)) {
            constantsMock.when(() -> Constants.ISO_8601_DATE_FORMAT).thenReturn("yyyy-MM-dd'T'HH:mm:ss'Z'");
            constantsMock.when(() -> Constants.UTC).thenReturn("UTC");

            String result = MemosDateUtility.getFormattedDate(memo);

            assertEquals("2025-01-01T17:30:00Z", result); // 12:30 PM EST converts to 5:30 PM UTC
        }
    }

    @Test
    void testGetFormattedDate_NullMemoDate_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn(null);
        when(memo.getMemoTime()).thenReturn("123000");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_NullMemoTime_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("20250101");
        when(memo.getMemoTime()).thenReturn(null);

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_NullMemoDateAndTime_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn(null);
        when(memo.getMemoTime()).thenReturn(null);

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_ParseException_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("invalidDate");
        when(memo.getMemoTime()).thenReturn("123000");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_InvalidTime_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("20250101");
        when(memo.getMemoTime()).thenReturn("invalidTime");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_EmptyMemoDate_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("");
        when(memo.getMemoTime()).thenReturn("123000");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_EmptyMemoTime_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("20250101");
        when(memo.getMemoTime()).thenReturn("");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }

    @Test
    void testGetFormattedDate_EmptyDateAndTime_ReturnsEmptyString() {
        MemoOutputVO memo = mock(MemoOutputVO.class);
        when(memo.getMemoDate()).thenReturn("");
        when(memo.getMemoTime()).thenReturn("");

        String result = MemosDateUtility.getFormattedDate(memo);

        assertEquals("", result);
    }
}
