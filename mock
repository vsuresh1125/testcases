import com.dfs.callcenter.card.platform.common.logging.LogUtil;
import com.dfs.ws.jwt.generator.WSJWToken;
import com.dfs.ws.jwt.generator.WSJWTGenerator;
import com.dfs.ws.jwt.generator.WSJWTException;
import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.message.Message;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class SoapCustomHeaderInterceptorTest {

    @Mock
    private WSJWTGenerator jwtGenerator;

    @Mock
    private SoapMessage soapMessage;

    private SoapCustomHeaderInterceptor interceptor;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        interceptor = new SoapCustomHeaderInterceptor(jwtGenerator);
    }

    @Test
    public void testHandleMessageWithValidToken() throws WSJWTException {
        // Arrange
        String expectedToken = "valid-jwt-token";
        when(jwtGenerator.getJWTToken()).thenReturn(expectedToken);

        Map<String, List<String>> headers = new HashMap<>();
        when(soapMessage.get(Message.PROTOCOL_HEADERS)).thenReturn(headers);

        // Act
        interceptor.handleMessage(soapMessage);

        // Assert
        assertEquals(Collections.singletonList(expectedToken), headers.get("HTTP_AUTH_TOKEN"));
    }

    @Test
    public void testHandleMessageWithException() throws WSJWTException {
        // Arrange
        when(jwtGenerator.getJWTToken()).thenThrow(new WSJWTException("Token generation failed"));

        Map<String, List<String>> headers = new HashMap<>();
        when(soapMessage.get(Message.PROTOCOL_HEADERS)).thenReturn(headers);

        // Act
        interceptor.handleMessage(soapMessage);

        // Assert
        assertEquals(Collections.singletonList(""), headers.get("HTTP_AUTH_TOKEN"));
    }

    @Test
    public void testHandleMessageWithEmptyToken() throws WSJWTException {
        // Arrange
        when(jwtGenerator.getJWTToken()).thenReturn("");

        Map<String, List<String>> headers = new HashMap<>();
        when(soapMessage.get(Message.PROTOCOL_HEADERS)).thenReturn(headers);

        // Act
        interceptor.handleMessage(soapMessage);

        // Assert
        assertEquals(Collections.singletonList(""), headers.get("HTTP_AUTH_TOKEN"));
    }

    @Test
    public void testGetJWTTokenValid() throws WSJWTException {
        // Arrange
        String expectedToken = "jwt-valid-token";
        when(jwtGenerator.getJWTToken()).thenReturn(expectedToken);

        // Act
        String result = interceptor.getJWTtoken();

        // Assert
        assertEquals(expectedToken, result);
    }

    @Test
    public void testGetJWTTokenException() throws WSJWTException {
        // Arrange
        when(jwtGenerator.getJWTToken()).thenThrow(new WSJWTException("Error generating token"));

        // Act
        String result = interceptor.getJWTtoken();

        // Assert
        assertEquals("", result);
    }
}
