
import com.dfs.callcenter.card.memos.model.output.WriteMultipleMemosOutputResponse;
import com.dfs.callcenter.card.platform.common.models.ErrorMessage;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class WriteMultipleMemosOutputResponseTest {

    private WriteMultipleMemosOutputResponse response;
    private List<WriteMultipleMemosOutput> mockMemoNotWritten;
    private List<ErrorMessage> mockErrors;

    @Before
    public void setUp() {
        // Initialize the class under test
        response = new WriteMultipleMemosOutputResponse();

        // Create mock lists
        mockMemoNotWritten = mock(List.class);
        mockErrors = mock(List.class);
    }

    @Test
    public void testSetAndGetMemoNotWritten() {
        // Set the mock list
        response.setMemoNotWritten(mockMemoNotWritten);

        // Verify that getMemoNotWritten returns the expected list
        assertEquals(mockMemoNotWritten, response.getMemoNotWritten());
    }

    @Test
    public void testSetAndGetErrors() {
        // Set the mock list
        response.setErrors(mockErrors);

        // Verify that getErrors returns the expected list
        assertEquals(mockErrors, response.getErrors());
    }

    @Test
    public void testMemoNotWrittenListSize() {
        // Mock size of the list
        when(mockMemoNotWritten.size()).thenReturn(3);

        // Set the mock list
        response.setMemoNotWritten(mockMemoNotWritten);

        // Verify the size
        assertEquals(3, response.getMemoNotWritten().size());
    }

    @Test
    public void testErrorsListSize() {
        // Mock size of the list
        when(mockErrors.size()).thenReturn(2);

        // Set the mock list
        response.setErrors(mockErrors);

        // Verify the size
        assertEquals(2, response.getErrors().size());
    }

    @Test
    public void testMemoNotWrittenContent() {
        // Create mock WriteMultipleMemosOutput objects
        WriteMultipleMemosOutput memo1 = mock(WriteMultipleMemosOutput.class);
        WriteMultipleMemosOutput memo2 = mock(WriteMultipleMemosOutput.class);

        // Create a list with mock objects
        List<WriteMultipleMemosOutput> memoList = Arrays.asList(memo1, memo2);

        // Set the list
        response.setMemoNotWritten(memoList);

        // Verify content
        assertEquals(2, response.getMemoNotWritten().size());
        assertEquals(memo1, response.getMemoNotWritten().get(0));
        assertEquals(memo2, response.getMemoNotWritten().get(1));
    }

    @Test
    public void testErrorMessageContent() {
        // Create mock ErrorMessage objects
        ErrorMessage error1 = mock(ErrorMessage.class);
        ErrorMessage error2 = mock(ErrorMessage.class);

        // Create a list with mock objects
        List<ErrorMessage> errorList = Arrays.asList(error1, error2);

        // Set the list
        response.setErrors(errorList);

        // Verify content
        assertEquals(2, response.getErrors().size());
        assertEquals(error1, response.getErrors().get(0));
        assertEquals(error2, response.getErrors().get(1));
    }
}
